import converters.JsonConverter;
import dto.LiveNodeMinimal;

import java.util.List;

public class Client {
    public static void main(String[] args) {
        String ips = extractIps(args);
        String nmapOutput = executeNmap(ips);
        List<String> potentialNameNodes = extractPotentialNameNodes(nmapOutput);
        List<LiveNodeMinimal> liveNodesMinimal = extractLiveDataNodesMinimal(potentialNameNodes);
        JsonConverter.prettyPrint(liveNodesMinimal);
    }

    /**
     * Creates a string containing Ips and Ip ranges.
     *
     * @param args porgram arguments
     * @return string with all ips and ip ranges
     */
    private static String extractIps(String[] args) {
        StringBuilder ipList = new StringBuilder();
        for (String arg : args) {
            ipList.append(arg + " ");
        }
        return ipList.toString().trim();
    }

    /**
     * Execute Nmap command to scan port 50070. This is the port used by NameNodes.
     *
     * @param ips that should be scanned
     * @return string with nmap results
     */
    private static String executeNmap(String ips) {
        CommandExecutor commandExecutor = new CommandExecutor();
        String nmapOutput = commandExecutor.execute("nmap --open " + ips + " -p 50070 -oX -");
        return nmapOutput;
    }

    /**
     * Extract potential NameNode ips from the Nmap output.
     *
     * @param nmapOutput String generated by Nmap
     * @return list with potential NameNodes (nodes with port 50070 opened)
     */
    private static List<String> extractPotentialNameNodes(String nmapOutput) {
        XmlToJsonConverter converter = new XmlToJsonConverter();
        PotentialNameNodeDiscoverer pnd = new PotentialNameNodeDiscoverer();
        String jsonString = converter.process(nmapOutput);
        List<String> potentialNameNodes = pnd.getPotentialNameNodes(jsonString);
        return potentialNameNodes;
    }

    /**
     * Extract minimal (name and ip) DataNode information.
     *
     * @param potentialNameNodes list with potential NameNodes
     * @return list with LiveNodesMinimal
     */
    private static List<LiveNodeMinimal> extractLiveDataNodesMinimal(List<String> potentialNameNodes) {
        List<LiveNodeMinimal> liveNodesMinimal = null;
        for (String ip : potentialNameNodes) {
            String url = "http://" + ip + ":50070/jmx?qry=Hadoop:service=NameNode,name=NameNodeInfo";
            HdfsNodeExtractor hdfsNodeExtractor = new HdfsNodeExtractor(url);
            liveNodesMinimal = hdfsNodeExtractor.getLiveDatNodesMinimal();
        }
        return liveNodesMinimal;
    }
}
